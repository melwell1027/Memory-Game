{"ast":null,"code":"import _classCallCheck from \"/Users/mattelwell/Desktop/click-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mattelwell/Desktop/click-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mattelwell/Desktop/click-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mattelwell/Desktop/click-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mattelwell/Desktop/click-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mattelwell/Desktop/click-game/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Tile from \"./components/Tile\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentScore: 0,\n      topScore: 0,\n      message: \"\",\n      tiles: [{\n        id: 0,\n        val: \"a\"\n      }, {\n        id: 1,\n        val: \"b\"\n      }, {\n        id: 2,\n        val: \"c\"\n      }, {\n        id: 3,\n        val: \"d\"\n      }, {\n        id: 4,\n        val: \"e\"\n      }]\n    };\n\n    _this.handleTileClick = function (id) {\n      // check to see if this has been clicked before\n      _this.state.tiles.forEach(function (tile) {\n        if (tile.id === id) {\n          if (tile.checked === true) {\n            //reset the game\n            _this.setState({\n              currentScore: 0,\n              message: \"You Lose!\"\n            });\n\n            _this.state.tiles.forEach(function (tile) {\n              tile.checked = false;\n            });\n          } else {\n            tile.checked = true; // update the score\n\n            _this.setState({\n              currentScore: _this.state.currentScore + 1,\n              message: \"Correct!\"\n            }); // if the score if greater than the top score, update the top score too\n\n\n            if (_this.state.currentScore >= _this.state.topScore) {\n              _this.setState({\n                topScore: _this.state.topScore + 1\n              });\n            }\n          }\n        }\n      }); // if they've clicked the tile before, somehow randomize the tiles\n\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Header, {\n        currentScore: this.state.currentScore,\n        topScore: this.state.topScore,\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"game-board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, this.state.tiles.map(function (tile, i) {\n        return React.createElement(Tile, {\n          key: i,\n          id: tile.id,\n          handleTileClick: _this2.handleTileClick,\n          char: tile.val,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/mattelwell/Desktop/click-game/src/App.js"],"names":["React","Component","Header","Tile","App","state","currentScore","topScore","message","tiles","id","val","handleTileClick","forEach","tile","checked","setState","map","i"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,YAAY,EAAE,CADR;AAENC,MAAAA,QAAQ,EAAE,CAFJ;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,KAAK,EAAE,CACL;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE;AAAd,OADK,EAEL;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE;AAAd,OAFK,EAGL;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE;AAAd,OAHK,EAIL;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE;AAAd,OAJK,EAKL;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE;AAAd,OALK;AAJD,K;;UAuBRC,e,GAAkB,UAACF,EAAD,EAAQ;AACxB;AACA,YAAKL,KAAL,CAAWI,KAAX,CAAiBI,OAAjB,CAAyB,UAACC,IAAD,EAAU;AACjC,YAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAhB,EAAoB;AAClB,cAAII,IAAI,CAACC,OAAL,KAAiB,IAArB,EAA2B;AACzB;AACA,kBAAKC,QAAL,CAAc;AAAEV,cAAAA,YAAY,EAAE,CAAhB;AAAmBE,cAAAA,OAAO,EAAE;AAA5B,aAAd;;AACA,kBAAKH,KAAL,CAAWI,KAAX,CAAiBI,OAAjB,CAAyB,UAACC,IAAD,EAAU;AAAGA,cAAAA,IAAI,CAACC,OAAL,GAAe,KAAhB;AAAwB,aAA7D;AACD,WAJD,MAIO;AACLD,YAAAA,IAAI,CAACC,OAAL,GAAe,IAAf,CADK,CAEL;;AACA,kBAAKC,QAAL,CAAc;AAAEV,cAAAA,YAAY,EAAE,MAAKD,KAAL,CAAWC,YAAX,GAA0B,CAA1C;AAA6CE,cAAAA,OAAO,EAAE;AAAtD,aAAd,EAHK,CAIL;;;AACA,gBAAI,MAAKH,KAAL,CAAWC,YAAX,IAA2B,MAAKD,KAAL,CAAWE,QAA1C,EAAoD;AAClD,oBAAKS,QAAL,CAAc;AAAET,gBAAAA,QAAQ,EAAE,MAAKF,KAAL,CAAWE,QAAX,GAAsB;AAAlC,eAAd;AACD;AACF;AACF;AACF,OAhBD,EAFwB,CAmBxB;;AAGD,K;;;;;;;6BACQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,YAAY,EAAE,KAAKF,KAAL,CAAWC,YAD3B;AAEE,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,QAFvB;AAGE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,OAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKH,KAAL,CAAWI,KAAX,CAAiBQ,GAAjB,CAAqB,UAACH,IAAD,EAAOI,CAAP;AAAA,eAAa,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEA,CAAX;AAAc,UAAA,EAAE,EAAEJ,IAAI,CAACJ,EAAvB;AAA2B,UAAA,eAAe,EAAE,MAAI,CAACE,eAAjD;AAAkE,UAAA,IAAI,EAAEE,IAAI,CAACH,GAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAb;AAAA,OAArB,CADH,CANF,CADF;AAYD;;;;EA5DeV,S;;AA+DlB,eAAeG,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Tile from \"./components/Tile\"\n\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    message: \"\",\n    tiles: [\n      { id: 0, val: \"a\" },\n      { id: 1, val: \"b\" },\n      { id: 2, val: \"c\" },\n      { id: 3, val: \"d\" },\n      { id: 4, val: \"e\" },\n      // { id: 5, val: \"f\" },\n      // { id: 6, val: \"g\" },\n      // { id: 7, val: \"h\" },\n      // { id: 8, val: \"i\" },\n      // { id: 9, val: \"j\" },\n      // { id: 10, val: \"k\" },\n      // { id: 11, val: \"l\" },\n      // { id: 12, val: \"m\" },\n      // { id: 13, val: \"n\" },\n      // { id: 14, val: \"o\" },\n      // { id: 15, val: \"p\" },\n    ]\n  }\n  handleTileClick = (id) => {\n    // check to see if this has been clicked before\n    this.state.tiles.forEach((tile) => {\n      if (tile.id === id) {\n        if (tile.checked === true) {\n          //reset the game\n          this.setState({ currentScore: 0, message: \"You Lose!\" });\n          this.state.tiles.forEach((tile) => { (tile.checked = false) });\n        } else {\n          tile.checked = true;\n          // update the score\n          this.setState({ currentScore: this.state.currentScore + 1, message: \"Correct!\" });\n          // if the score if greater than the top score, update the top score too\n          if (this.state.currentScore >= this.state.topScore) {\n            this.setState({ topScore: this.state.topScore + 1 })\n          }\n        }\n      }\n    });\n    // if they've clicked the tile before, somehow randomize the tiles\n\n\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <Header\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <div className=\"game-board\">\n          {this.state.tiles.map((tile, i) => <Tile key={i} id={tile.id} handleTileClick={this.handleTileClick} char={tile.val} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}